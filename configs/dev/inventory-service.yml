# to automatically assign a random unused port
server:
  port: 0

spring:
  application:
    name: inventory-service # for unique service name

  # Keycloak jwt resource uri
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://localhost:8080/realms/RentACarMicroservice/protocol/openid-connect/certs

  # PostgreSQL database configuration
  datasource:
    username: postgres
    password: 'postgres'
    url: jdbc:postgresql://localhost:5432/inventorydb-t2

  # ORM
  jpa:
    properties:
      hibernate:
        # https://docs.jboss.org/hibernate/orm/3.5/javadocs/org/hibernate/dialect/package-summary.html#:~:text=PostgreSQLDialect
        dialect: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      # validate: validate the schema, makes no changes to the database.
      # update: update the schema.
      # create: creates the schema, destroying previous data.
      # create-drop: drop the schema at the end of the session.
      ddl-auto: update

  # message broker(kafka) configurations
  kafka:
    # to send an event in async communication
    producer:
      bootstrap-servers: http://localhost:9092
      # serializers
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

    # to listen from the queue for events generated by another service
    consumer:
      auto-offset-reset: earliest
      bootstrap-servers: http://localhost:9092
      # deserializers
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: "*"

# Discovery client configuration for registering the service to the discovery server
eureka:
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defaultZone: http://localhost:8761/eureka
  instance:
    instance-id: ${spring.application.name}:${random.value} # The purpose of using the random number is to generate the unique name in case of multiple running of the service.
    prefer-ip-address: true


management:
  endpoints:
    web:
      exposure:
        include: "*"
  tracing:
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans