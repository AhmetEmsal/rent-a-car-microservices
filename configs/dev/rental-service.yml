# to automatically assign a random unused port
server:
  port: 0

spring:
  application:
    name: rental-service # for unique service name

  # PostgreSQL database configuration
  datasource:
    username: postgres
    password: 'postgres'
    url: jdbc:postgresql://localhost:5432/rentaldb-t2

  # ORM
  jpa:
    properties:
      hibernate:
        # https://docs.jboss.org/hibernate/orm/3.5/javadocs/org/hibernate/dialect/package-summary.html#:~:text=PostgreSQLDialect
        dialect: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      # validate: validate the schema, makes no changes to the database.
      # update: update the schema.
      # create: creates the schema, destroying previous data.
      # create-drop: drop the schema at the end of the session.
      ddl-auto: update

  # Feign client(sync communication)
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true # enables the circuit breaker feature for Feign clients

  # message broker(kafka) configurations
  kafka:
    # to send an event in async communication
    producer:
      bootstrap-servers: http://localhost:9092
      # serializers
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

# fault tolerance library
resilience4j:
  retry:
    instances:
      notAvailableService:
        max-attempts: 5
        wait-duration: 2s
  #        retry-exceptions:
  #          - org.springframework.web.client.HttpServerErrorException
  #          - java.util.concurrent.TimeoutException
  #          - java.io.IOException
  #        ignore-exceptions:
  #          - com.kodlamaio.commonpackage.utils.exceptions.BusinessException

# Discovery client configuration for registering the service to the discovery server
eureka:
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defaultZone: http://localhost:8761/eureka
  instance:
    instance-id: ${spring.application.name}:${random.value} # The purpose of using the random number is to generate the unique name in case of multiple running of the service.
    prefer-ip-address: true